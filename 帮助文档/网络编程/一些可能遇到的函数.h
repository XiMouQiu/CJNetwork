//
//  Copyright (c) 2014年 lichq. All rights reserved.
//

#pragma mark - uint8_t / uint16_t / uint32_t /uint64_t  是什么数据类型
在nesc的代码中，你会看到很多你不认识的数据类型，比如uint8_t等。咋一看，好像是个新的数据类型，不过C语言（nesc是C的扩展）里面好像没有这种数据类型啊！怎么又是u又是_t的？很多人有这样的疑问。

那么_t的意思到底表示什么？具体的官方答案没有找到，不过我觉得有个答案比较接近。它就是一个结构的标注，可以理解为type/typedef的缩写，表示它是通过typedef定义的，而不是其它数据类型。

uint8_t，uint16_t，uint32_t等都不是什么新的数据类型，它们只是使用typedef给类型起的别名，新瓶装老酒的把戏。不过，不要小看了typedef，它对于你代码的维护会有很好的作用。比如C中没有bool，于是在一个软件中，一些程序员使用int，一些程序员使用short，会比较混乱，最好就是用一个typedef来定义，如：
typedef char bool;

一般来说，一个C的工程中一定要做一些这方面的工作，因为你会涉及到跨平台，不同的平台会有不同的字长，所以利用预编译和typedef可以让你最有效的维护你的代码。为了用户的方便，C99标准的C语言硬件为我们定义了这些类型，我们放心使用就可以了。

按照posix标准，一般整形对应的*_t类型为：
1字节     uint8_t
2字节     uint16_t
4字节     uint32_t
8字节     uint64_t


